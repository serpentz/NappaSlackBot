'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SlackEventAdapter = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _lodash = require('lodash.isstring');

var _lodash2 = _interopRequireDefault(_lodash);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _httpHandler = require('./http-handler');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = (0, _debug2.default)('@slack/events-api:adapter');

var SlackEventAdapter = exports.SlackEventAdapter = function (_EventEmitter) {
  _inherits(SlackEventAdapter, _EventEmitter);

  function SlackEventAdapter(signingSecret) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, SlackEventAdapter);

    if (!(0, _lodash2.default)(signingSecret)) {
      throw new TypeError('SlackEventAdapter needs a signing secret');
    }

    var _this = _possibleConstructorReturn(this, (SlackEventAdapter.__proto__ || Object.getPrototypeOf(SlackEventAdapter)).call(this));

    _this.signingSecret = signingSecret;
    _this.includeBody = !!options.includeBody || false;
    _this.includeHeaders = !!options.includeHeaders || false;
    _this.waitForResponse = !!options.waitForResponse || false;

    debug('adapter instantiated - options: %o', {
      includeBody: _this.includeBody,
      includeHeaders: _this.includeHeaders,
      waitForResponse: _this.waitForResponse
    });
    return _this;
  }

  // TODO: options (like https)


  _createClass(SlackEventAdapter, [{
    key: 'createServer',
    value: function createServer() {
      var _this2 = this;

      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/slack/events';

      // NOTE: this is a workaround for a shortcoming of the System.import() tranform
      return Promise.resolve().then(function () {
        debug('server created - path: %s', path);

        return _http2.default.createServer(_this2.requestListener());
      });
    }
  }, {
    key: 'start',
    value: function start(port) {
      var _this3 = this;

      return this.createServer().then(function (server) {
        return new Promise(function (resolve, reject) {
          _this3.server = server;
          server.on('error', reject);
          server.listen(port, function () {
            return resolve(server);
          });
          debug('server started - port: %s', port);
        });
      });
    }
  }, {
    key: 'stop',
    value: function stop() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        if (_this4.server) {
          _this4.server.close(function (error) {
            delete _this4.server;
            if (error) {
              reject(error);
            } else {
              resolve();
            }
          });
        } else {
          reject(new Error('SlackEventAdapter cannot stop when it did not start a server'));
        }
      });
    }
  }, {
    key: 'expressMiddleware',
    value: function expressMiddleware() {
      var middlewareOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var requestListener = this.requestListener(middlewareOptions);
      return function (req, res, next) {
        // eslint-disable-line no-unused-vars
        requestListener(req, res);
      };
    }
  }, {
    key: 'requestListener',
    value: function requestListener() {
      var middlewareOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return (0, _httpHandler.createHTTPHandler)(this, middlewareOptions);
    }
  }]);

  return SlackEventAdapter;
}(_events2.default);

/**
 * @alias module:adapter
 */


exports.default = SlackEventAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwiU2xhY2tFdmVudEFkYXB0ZXIiLCJzaWduaW5nU2VjcmV0Iiwib3B0aW9ucyIsIlR5cGVFcnJvciIsImluY2x1ZGVCb2R5IiwiaW5jbHVkZUhlYWRlcnMiLCJ3YWl0Rm9yUmVzcG9uc2UiLCJwYXRoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiaHR0cCIsImNyZWF0ZVNlcnZlciIsInJlcXVlc3RMaXN0ZW5lciIsInBvcnQiLCJyZWplY3QiLCJzZXJ2ZXIiLCJvbiIsImxpc3RlbiIsImNsb3NlIiwiZXJyb3IiLCJFcnJvciIsIm1pZGRsZXdhcmVPcHRpb25zIiwicmVxIiwicmVzIiwibmV4dCIsIkV2ZW50RW1pdHRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7OztBQUVBLElBQU1BLFFBQVEscUJBQWEsMkJBQWIsQ0FBZDs7SUFFYUMsaUIsV0FBQUEsaUI7OztBQUNYLDZCQUFZQyxhQUFaLEVBQXlDO0FBQUEsUUFBZEMsT0FBYyx1RUFBSixFQUFJOztBQUFBOztBQUN2QyxRQUFJLENBQUMsc0JBQVNELGFBQVQsQ0FBTCxFQUE4QjtBQUM1QixZQUFNLElBQUlFLFNBQUosQ0FBYywwQ0FBZCxDQUFOO0FBQ0Q7O0FBSHNDOztBQU92QyxVQUFLRixhQUFMLEdBQXFCQSxhQUFyQjtBQUNBLFVBQUtHLFdBQUwsR0FBbUIsQ0FBQyxDQUFDRixRQUFRRSxXQUFWLElBQXlCLEtBQTVDO0FBQ0EsVUFBS0MsY0FBTCxHQUFzQixDQUFDLENBQUNILFFBQVFHLGNBQVYsSUFBNEIsS0FBbEQ7QUFDQSxVQUFLQyxlQUFMLEdBQXVCLENBQUMsQ0FBQ0osUUFBUUksZUFBVixJQUE2QixLQUFwRDs7QUFFQVAsVUFBTSxvQ0FBTixFQUE0QztBQUMxQ0ssbUJBQWEsTUFBS0EsV0FEd0I7QUFFMUNDLHNCQUFnQixNQUFLQSxjQUZxQjtBQUcxQ0MsdUJBQWlCLE1BQUtBO0FBSG9CLEtBQTVDO0FBWnVDO0FBaUJ4Qzs7QUFFRDs7Ozs7bUNBQ3FDO0FBQUE7O0FBQUEsVUFBeEJDLElBQXdCLHVFQUFqQixlQUFpQjs7QUFDbkM7QUFDQSxhQUFPQyxRQUFRQyxPQUFSLEdBQWtCQyxJQUFsQixDQUF1QixZQUFNO0FBQ2xDWCxjQUFNLDJCQUFOLEVBQW1DUSxJQUFuQzs7QUFFQSxlQUFPSSxlQUFLQyxZQUFMLENBQWtCLE9BQUtDLGVBQUwsRUFBbEIsQ0FBUDtBQUNELE9BSk0sQ0FBUDtBQUtEOzs7MEJBRUtDLEksRUFBTTtBQUFBOztBQUNWLGFBQU8sS0FBS0YsWUFBTCxHQUNKRixJQURJLENBQ0M7QUFBQSxlQUFVLElBQUlGLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVNLE1BQVYsRUFBcUI7QUFDL0MsaUJBQUtDLE1BQUwsR0FBY0EsTUFBZDtBQUNBQSxpQkFBT0MsRUFBUCxDQUFVLE9BQVYsRUFBbUJGLE1BQW5CO0FBQ0FDLGlCQUFPRSxNQUFQLENBQWNKLElBQWQsRUFBb0I7QUFBQSxtQkFBTUwsUUFBUU8sTUFBUixDQUFOO0FBQUEsV0FBcEI7QUFDQWpCLGdCQUFNLDJCQUFOLEVBQW1DZSxJQUFuQztBQUNELFNBTGUsQ0FBVjtBQUFBLE9BREQsQ0FBUDtBQU9EOzs7MkJBRU07QUFBQTs7QUFDTCxhQUFPLElBQUlOLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVNLE1BQVYsRUFBcUI7QUFDdEMsWUFBSSxPQUFLQyxNQUFULEVBQWlCO0FBQ2YsaUJBQUtBLE1BQUwsQ0FBWUcsS0FBWixDQUFrQixVQUFDQyxLQUFELEVBQVc7QUFDM0IsbUJBQU8sT0FBS0osTUFBWjtBQUNBLGdCQUFJSSxLQUFKLEVBQVc7QUFDVEwscUJBQU9LLEtBQVA7QUFDRCxhQUZELE1BRU87QUFDTFg7QUFDRDtBQUNGLFdBUEQ7QUFRRCxTQVRELE1BU087QUFDTE0saUJBQU8sSUFBSU0sS0FBSixDQUFVLDhEQUFWLENBQVA7QUFDRDtBQUNGLE9BYk0sQ0FBUDtBQWNEOzs7d0NBRXlDO0FBQUEsVUFBeEJDLGlCQUF3Qix1RUFBSixFQUFJOztBQUN4QyxVQUFNVCxrQkFBa0IsS0FBS0EsZUFBTCxDQUFxQlMsaUJBQXJCLENBQXhCO0FBQ0EsYUFBTyxVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUFFO0FBQzNCWix3QkFBZ0JVLEdBQWhCLEVBQXFCQyxHQUFyQjtBQUNELE9BRkQ7QUFHRDs7O3NDQUV1QztBQUFBLFVBQXhCRixpQkFBd0IsdUVBQUosRUFBSTs7QUFDdEMsYUFBTyxvQ0FBa0IsSUFBbEIsRUFBd0JBLGlCQUF4QixDQUFQO0FBQ0Q7Ozs7RUFsRW9DSSxnQjs7QUFxRXZDOzs7OztrQkFHZTFCLGlCIiwiZmlsZSI6ImFkYXB0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCBpc1N0cmluZyBmcm9tICdsb2Rhc2guaXNzdHJpbmcnO1xuaW1wb3J0IGRlYnVnRmFjdG9yeSBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBjcmVhdGVIVFRQSGFuZGxlciB9IGZyb20gJy4vaHR0cC1oYW5kbGVyJztcblxuY29uc3QgZGVidWcgPSBkZWJ1Z0ZhY3RvcnkoJ0BzbGFjay9ldmVudHMtYXBpOmFkYXB0ZXInKTtcblxuZXhwb3J0IGNsYXNzIFNsYWNrRXZlbnRBZGFwdGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3Ioc2lnbmluZ1NlY3JldCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCFpc1N0cmluZyhzaWduaW5nU2VjcmV0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU2xhY2tFdmVudEFkYXB0ZXIgbmVlZHMgYSBzaWduaW5nIHNlY3JldCcpO1xuICAgIH1cblxuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnNpZ25pbmdTZWNyZXQgPSBzaWduaW5nU2VjcmV0O1xuICAgIHRoaXMuaW5jbHVkZUJvZHkgPSAhIW9wdGlvbnMuaW5jbHVkZUJvZHkgfHwgZmFsc2U7XG4gICAgdGhpcy5pbmNsdWRlSGVhZGVycyA9ICEhb3B0aW9ucy5pbmNsdWRlSGVhZGVycyB8fCBmYWxzZTtcbiAgICB0aGlzLndhaXRGb3JSZXNwb25zZSA9ICEhb3B0aW9ucy53YWl0Rm9yUmVzcG9uc2UgfHwgZmFsc2U7XG5cbiAgICBkZWJ1ZygnYWRhcHRlciBpbnN0YW50aWF0ZWQgLSBvcHRpb25zOiAlbycsIHtcbiAgICAgIGluY2x1ZGVCb2R5OiB0aGlzLmluY2x1ZGVCb2R5LFxuICAgICAgaW5jbHVkZUhlYWRlcnM6IHRoaXMuaW5jbHVkZUhlYWRlcnMsXG4gICAgICB3YWl0Rm9yUmVzcG9uc2U6IHRoaXMud2FpdEZvclJlc3BvbnNlLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gVE9ETzogb3B0aW9ucyAobGlrZSBodHRwcylcbiAgY3JlYXRlU2VydmVyKHBhdGggPSAnL3NsYWNrL2V2ZW50cycpIHtcbiAgICAvLyBOT1RFOiB0aGlzIGlzIGEgd29ya2Fyb3VuZCBmb3IgYSBzaG9ydGNvbWluZyBvZiB0aGUgU3lzdGVtLmltcG9ydCgpIHRyYW5mb3JtXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgZGVidWcoJ3NlcnZlciBjcmVhdGVkIC0gcGF0aDogJXMnLCBwYXRoKTtcblxuICAgICAgcmV0dXJuIGh0dHAuY3JlYXRlU2VydmVyKHRoaXMucmVxdWVzdExpc3RlbmVyKCkpO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhcnQocG9ydCkge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZVNlcnZlcigpXG4gICAgICAudGhlbihzZXJ2ZXIgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICAgICAgc2VydmVyLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgIHNlcnZlci5saXN0ZW4ocG9ydCwgKCkgPT4gcmVzb2x2ZShzZXJ2ZXIpKTtcbiAgICAgICAgZGVidWcoJ3NlcnZlciBzdGFydGVkIC0gcG9ydDogJXMnLCBwb3J0KTtcbiAgICAgIH0pKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh0aGlzLnNlcnZlcikge1xuICAgICAgICB0aGlzLnNlcnZlci5jbG9zZSgoZXJyb3IpID0+IHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5zZXJ2ZXI7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1NsYWNrRXZlbnRBZGFwdGVyIGNhbm5vdCBzdG9wIHdoZW4gaXQgZGlkIG5vdCBzdGFydCBhIHNlcnZlcicpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGV4cHJlc3NNaWRkbGV3YXJlKG1pZGRsZXdhcmVPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0TGlzdGVuZXIgPSB0aGlzLnJlcXVlc3RMaXN0ZW5lcihtaWRkbGV3YXJlT3B0aW9ucyk7XG4gICAgcmV0dXJuIChyZXEsIHJlcywgbmV4dCkgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXF1ZXN0TGlzdGVuZXIocmVxLCByZXMpO1xuICAgIH07XG4gIH1cblxuICByZXF1ZXN0TGlzdGVuZXIobWlkZGxld2FyZU9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBjcmVhdGVIVFRQSGFuZGxlcih0aGlzLCBtaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOmFkYXB0ZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgU2xhY2tFdmVudEFkYXB0ZXI7XG4iXX0=
//# sourceMappingURL=adapter.js.map